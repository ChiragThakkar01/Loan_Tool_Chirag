# -*- coding: utf-8 -*-
"""Loan_Checker_Tool.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fkkeXf_9vRbdv8LRpQis3ke-gxY42NYC
"""

import streamlit as st
import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

# --- PAGE SETUP ---
st.set_page_config(page_title="Chirag Loan Checker Tool", layout="centered")

# --- HEADER ---
st.markdown(
    """
    <h1 style='text-align: center; color: #4CAF50;'>üè¶ Chirag Loan Checker Tool</h1>
    <h5 style='text-align: center;'>Check your loan eligibility instantly by answering the following questions</h5>
    <hr style='border: 1px solid #4CAF50;'>
    """,
    unsafe_allow_html=True,
)

# --- LOAD DATASET ---
df = pd.read_csv("updated_creditworthiness_dataset.csv")

# --- FEATURES & TARGET ---
desired_features = [
    'person_age', 'person_gender', 'person_income', 'person_home_ownership',
    'loan_amnt', 'loan_int_rate', 'loan_percent_income',
    'Status of existing checking account', 'loan_intent',
    'loan_grade', 'cb_person_default_on_file', 'cb_person_cred_hist_length'
]
target = 'loan_eligibility'

# Check and filter available features
features = [col for col in desired_features if col in df.columns]
missing = [col for col in desired_features if col not in df.columns]

if missing:
    st.warning(f"‚ö†Ô∏è The following expected columns are missing and will be skipped: {missing}")

if target not in df.columns:
    st.error(f"‚ùå The target column '{target}' is missing in your dataset.")
    st.stop()

if len(features) < 5:
    st.error("‚ùå Not enough valid features found to train the model. Please check your dataset.")
    st.stop()

# --- ENCODING ---
le_dict = {}
for col in features:
    if df[col].dtype == 'object':
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col].astype(str))
        le_dict[col] = le

# --- TRAIN MODEL ---
X = df[features]
y = df[target].apply(lambda x: 1 if x == 'Yes' else 0)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier()
model.fit(X_train, y_train)

# --- SAVE MODEL ---
joblib.dump(model, 'loan_eligibility_model.pkl')
joblib.dump(le_dict, 'label_encoders.pkl')

# --- USER INPUT FORM ---
st.subheader("üìã Personal and Financial Information")

with st.expander("‚ÑπÔ∏è Help: What do these questions mean?"):
    st.markdown("""
    - **Home Ownership**: Whether you rent or own your home.
    - **Loan Purpose**: Why you need the loan.
    - **Credit History Length**: How long you've had a credit profile (in years).
    - **Default History**: Have you defaulted on any loan before?
    - **Percent of Income**: Automatically calculated ‚Äî what portion of your income goes into this loan.
    """)

col1, col2 = st.columns(2)

with col1:
    person_age = st.slider("Your Age", 18, 70, 30)
    person_gender = st.selectbox("Gender", ['male', 'female'])
    person_income = st.number_input("Monthly Income (INR)", min_value=0)

with col2:
    person_home_ownership = st.selectbox("Home Ownership", ['RENT', 'OWN', 'MORTGAGE', 'OTHER'])
    loan_amnt = st.number_input("Loan Amount Required", min_value=1000)
    loan_int_rate = st.slider("Loan Interest Rate (%)", min_value=0.0, max_value=40.0, value=12.0)

loan_percent_income = loan_amnt / (person_income + 1)

col3, col4 = st.columns(2)

with col3:
    loan_intent = st.selectbox("Purpose of Loan", ['PERSONAL', 'EDUCATION', 'MEDICAL', 'VENTURE', 'HOMEIMPROVEMENT', 'DEBTCONSOLIDATION'])
    loan_grade = st.selectbox("Loan Grade (Credit Rating)", ['A', 'B', 'C', 'D', 'E', 'F', 'G'])

with col4:
    account_status = st.selectbox("Checking Account Status", ['good', 'bad'])
    default_on_file = st.selectbox("Default History", ['Y', 'N'])
    credit_hist_length = st.slider("Credit History Length (Years)", 0, 30, 5)

# --- PREDICTION ---
if st.button("üí° Check Loan Eligibility"):
    model = joblib.load('loan_eligibility_model.pkl')
    le_dict = joblib.load('label_encoders.pkl')

    input_data = {
        'person_age': person_age,
        'person_gender': person_gender,
        'person_income': person_income,
        'person_home_ownership': person_home_ownership,
        'loan_amnt': loan_amnt,
        'loan_int_rate': loan_int_rate,
        'loan_percent_income': loan_percent_income,
        'Status of existing checking account': account_status,
        'loan_intent': loan_intent,
        'loan_grade': loan_grade,
        'cb_person_default_on_file': default_on_file,
        'cb_person_cred_hist_length': credit_hist_length
    }

    # Filter only used features
    input_data = {k: v for k, v in input_data.items() if k in features}

    # Encode
    for col in input_data:
        if col in le_dict:
            input_data[col] = le_dict[col].transform([input_data[col]])[0]

    input_df = pd.DataFrame([input_data])
    prediction = model.predict(input_df)[0]

    result = '‚úÖ You are **Eligible** for Loan!' if prediction == 1 else '‚ùå You are **Not Eligible** for Loan.'
    st.markdown(f"### Result: {result}")

# --- FOOTER ---
st.markdown("""
<hr style='border: 1px solid #ddd;'>
<p style='text-align: center; color: gray;'>Made with ‚ù§Ô∏è by Chirag</p>
""", unsafe_allow_html=True)